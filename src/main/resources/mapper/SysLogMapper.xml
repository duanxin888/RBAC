<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.duanxin.dao.SysLogMapper">
  <resultMap id="BaseResultMap" type="com.duanxin.model.SysLog">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="target_id" jdbcType="INTEGER" property="targetId" />
    <result column="operator" jdbcType="VARCHAR" property="operator" />
    <result column="operate_time" jdbcType="TIMESTAMP" property="operateTime" />
    <result column="operate_ip" jdbcType="VARCHAR" property="operateIp" />
    <result column="status" jdbcType="INTEGER" property="status" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.duanxin.model.SysLogWithBLOBs">
    <result column="old_value" jdbcType="LONGVARCHAR" property="oldValue" />
    <result column="new_value" jdbcType="LONGVARCHAR" property="newValue" />
  </resultMap>
  <sql id="Base_Column_List">
    id, type, target_id, operator, operate_time, operate_ip, status
  </sql>

  <sql id="Blob_Column_List">
    old_value, new_value
  </sql>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from sys_log
    where id = #{id,jdbcType=INTEGER}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from sys_log
    where id = #{id,jdbcType=INTEGER}
  </delete>

  <insert id="insert" parameterType="com.duanxin.model.SysLogWithBLOBs">
    insert into sys_log (id, type, target_id, 
      operator, operate_time, operate_ip, 
      status, old_value, new_value
      )
    values (#{record.id,jdbcType=INTEGER}, #{record.type,jdbcType=INTEGER}, #{record.targetId,jdbcType=INTEGER},
      #{record.operator,jdbcType=VARCHAR}, #{record.operateTime,jdbcType=TIMESTAMP}, #{record.operateIp,jdbcType=VARCHAR},
      #{record.status,jdbcType=INTEGER}, #{record.oldValue,jdbcType=LONGVARCHAR}, #{record.newValue,jdbcType=LONGVARCHAR}
      )
  </insert>

  <insert id="insertSelective" parameterType="com.duanxin.model.SysLogWithBLOBs">
    insert into sys_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="record.id != null">
        id,
      </if>
      <if test="record.type != null">
        type,
      </if>
      <if test="record.targetId != null">
        target_id,
      </if>
      <if test="record.operator != null">
        operator,
      </if>
      <if test="record.operateTime != null">
        operate_time,
      </if>
      <if test="record.operateIp != null">
        operate_ip,
      </if>
      <if test="record.status != null">
        status,
      </if>
      <if test="record.oldValue != null">
        old_value,
      </if>
      <if test="record.newValue != null">
        new_value,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="record.id != null">
        #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.type != null">
        #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.targetId != null">
        #{record.targetId,jdbcType=INTEGER},
      </if>
      <if test="record.operator != null">
        #{record.operator,jdbcType=VARCHAR},
      </if>
      <if test="record.operateTime != null">
        #{record.operateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.operateIp != null">
        #{record.operateIp,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.oldValue != null">
        #{record.oldValue,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.newValue != null">
        #{record.newValue,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="com.duanxin.model.SysLogWithBLOBs">
    update sys_log
    <set>
      <if test="record.type != null">
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.targetId != null">
        target_id = #{record.targetId,jdbcType=INTEGER},
      </if>
      <if test="record.operator != null">
        operator = #{record.operator,jdbcType=VARCHAR},
      </if>
      <if test="record.operateTime != null">
        operate_time = #{record.operateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.operateIp != null">
        operate_ip = #{record.operateIp,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.oldValue != null">
        old_value = #{record.oldValue,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.newValue != null">
        new_value = #{record.newValue,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{record.id,jdbcType=INTEGER}
  </update>

  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.duanxin.model.SysLogWithBLOBs">
    update sys_log
    set type = #{record.type,jdbcType=INTEGER},
      target_id = #{record.targetId,jdbcType=INTEGER},
      operator = #{record.operator,jdbcType=VARCHAR},
      operate_time = #{record.operateTime,jdbcType=TIMESTAMP},
      operate_ip = #{record.operateIp,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=INTEGER},
      old_value = #{record.oldValue,jdbcType=LONGVARCHAR},
      new_value = #{record.newValue,jdbcType=LONGVARCHAR}
    where id = #{record.id,jdbcType=INTEGER}
  </update>

  <select id="countBySearchDto" resultType="int" parameterType="map">
    select count(1)
    from sys_log
    <include refid="queryConditions"/>
  </select>

  <select id="getPageListBySearchDto" parameterType="map" resultMap="ResultMapWithBLOBs">
    select <include refid="Base_Column_List" />,<include refid="Blob_Column_List" />
    from sys_log
    <include refid="queryConditions"/>
    order by operate_time desc
    limit #{page.offset}, #{page.pageSize}
  </select>
  
  <sql id="queryConditions">
    <where>
      <if test="dto.type != null">
        and type = #{dto.type}
      </if>
      <if test="dto.beforeSeg != null and dto.beforeSeg != ''">
        and old_value like #{dto.beforeSeg}
      </if>
      <if test="dto.afterSeg != null and dto.afterSeg != ''">
        and new_value like #{dto.afterSeg}
      </if>
      <if test="dto.operator != null and dto.operator != ''">
        and operator like #{dto.operator}
      </if>
      <if test="dto.fromTime != null">
        and operate_time &gt;= #{dto.fromTime}
      </if>
      <if test="dto.toTime != null">
        and operate_time &lt;= #{dto.toTime}
      </if>
    </where>
  </sql>
</mapper>